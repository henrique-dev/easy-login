.container.d-flex.flex-column.gap-4.p-4
  .text-center
    h1 Sign Up
  = form_for @user, url: sign_up_path, class: 'd-flex flex-column p-2', html: { onsubmit: "return validateForm(this);" } do |f|
    .mb-3
      label.form-label Name
      = f.text_field :name, class: 'form-control', required: true
      .d-flex.flex-column.gap-1
        - field_with_error(@errors, 'name').each do |error|
          span.error.text-danger.fs-6 = error
    .mb-3
      label.form-label Email
      = f.email_field :email, class: 'form-control', required: true
      .d-flex.flex-column.gap-1
        - field_with_error(@errors, 'email').each do |error|
          span.error.text-danger.fs-6 = error
    .mb-3
      label.form-label Password
      = f.password_field :password, class: 'form-control', required: true
      .d-flex.flex-column.gap-1
        - field_with_error(@errors, 'password').each do |error|
          span.error.text-danger.fs-6 = error
    = f.submit 'Sign up', class: 'btn btn-primary w-100'

  .d-flex.justify-content-center.flex-column.align-items-center
    span Already have an account?
    = link_to 'Sign in', sign_in_path

javascript:
  const showError = (elementId, error) => {
    const elementInput = document.getElementById(elementId);
    const container = elementInput.parentElement;

    if (!document.getElementById(`error_${elementId}`)) {
      const errorSpan = document.createElement("span");
      errorSpan.id = `error_${elementId}`;
      errorSpan.textContent = error;
      errorSpan.classList = "error text-danger fs-6";
      container.appendChild(errorSpan);
    }

    return false;
  };

  const stringMatcher = (value, regex) => {
    const result = String(value).match(regex);

    if (!result) return 0;

    return result.length;
  }

  const validateForm = (e) => {
    let formWithoutError = true;

    try {

      for (const element of document.getElementsByClassName('error')) {
        element.remove();
      }

      const name = document.getElementById('user_name').value;
      const email =  document.getElementById('user_email').value;
      const password = document.getElementById('user_password').value;

      if (name.length < 5) {
        formWithoutError = showError('user_name', 'size cannot be less than 5');
      }
      if (name.length > 128) {
        formWithoutError = showError('user_name', 'size cannot be greater than 128');
      }

      if (!email.match(/^[\w!#$%&'*+-/=?^_`{|}~.]{1,64}@[a-zA-Z0-9.-]{1,128}$/)) {
        formWithoutError = showError('user_email', 'is not valid');
      }

      if (password.length < 10) {
        formWithoutError = showError('user_password', 'size cannot be less than 10');
      }
      if (password.length > 72) {
        formWithoutError = showError('user_password', 'size cannot be greater than 72');
      }
      if (stringMatcher(password, /[0-9]/g) < 2) {
        formWithoutError = showError('user_password', 'must have at least 2 numbers');
      }
      if (stringMatcher(password, /[ !"#$%&'()*+,-./:;<=>?@\[\\\]^_`{|}~]/g) < 2) {
        formWithoutError = showError('user_password', 'must have at least 2 special chars');
      }

      if (stringMatcher(password, /[A-Z]/g) < 2) {
        formWithoutError = showError('user_password', 'must have at least 2 uppercase letters');
      }
      if (stringMatcher(password, /[a-z]/g) < 2) {
        formWithoutError = showError('user_password', 'must have at least 2 lowercase letters');
      }

    } catch (error) {
      console.warn(error);
    }

    return formWithoutError;
    return false;
  }
